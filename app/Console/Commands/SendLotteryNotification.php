<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\TravelUser;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Api;
use Telegram\Bot\Exceptions\TelegramResponseException;
use Telegram\Bot\Exceptions\TelegramSDKException;

class SendLotteryNotification extends Command
{
    protected $signature = 'notification:lottery-start';
    protected $description = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º';

    /**
     * @throws TelegramSDKException
     */
    public function handle(): void
    {
        //–ø–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏ –±–¥
        config(['database.default' => 'mysql_test']);
        $testBotToken = config('telegram.bots.test.token');
        $telegram = new Api($testBotToken);
        $successCount = 0;
        $errorCount = 0;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ telegram_id –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        $telegramIds = TravelUser::whereNotNull('telegram_id')
            ->where('telegram_id', '!=', '')
            ->pluck('telegram_id');

        $this->info("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . $telegramIds->count());

        $batchSize = 30; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        $delayBetweenBatches = 1; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        foreach ($telegramIds->chunk($batchSize) as $chunk) {
            foreach ($chunk as $telegramId) {
                try {
                    $telegram->sendMessage([
                        'chat_id' => $telegramId,
                        'text' => 'üéâ –ù–∞—á–∞–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à! –£—á–∞—Å—Ç–≤—É–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã! üéä',
                        'parse_mode' => 'HTML'
                    ]);

                    $successCount++;
                    $this->info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {$telegramId}");
                } catch (TelegramResponseException $e) {
                    $errorCount++;
                    $this->handleError($e, $telegramId);
                }

                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                usleep(50000); // 0.05 —Å–µ–∫—É–Ω–¥—ã
            }

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if ($delayBetweenBatches > 0) {
                sleep($delayBetweenBatches);
            }
        }

        $this->info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {$successCount}, –û—à–∏–±–æ–∫: {$errorCount}");
    }

    protected function handleError($exception, $telegramId)
    {
        $errorMessage = "–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$telegramId}: " . $exception->getMessage();
        $this->error($errorMessage);
        Log::error($errorMessage);

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        if (str_contains($exception->getMessage(), 'bot was blocked')) {
            TravelUser::where('telegram_id', $telegramId)->update(['telegram_id' => null]);
            $this->warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, telegram_id –æ–±–Ω—É–ª–µ–Ω");
        }
    }
}