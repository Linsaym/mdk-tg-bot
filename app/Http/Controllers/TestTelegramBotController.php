<?php

namespace App\Http\Controllers;

use App\Models\Answer;
use App\Models\ContestParticipant;
use App\Models\TravelUser;
use App\Models\Question;
use App\Repositories\TelegramMessageRepository;
use Exception;
use Telegram\Bot\Api;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Exceptions\TelegramSDKException;

class TestTelegramBotController extends Controller
{
    private Api $telegram;

    private TelegramMessageRepository $messageRepository;

    // –û–±—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    public string $instructions = "\n\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
    . "1. –°–Ω–∞—á–∞–ª–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
    . "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç —Å –¥—Ä—É–∑—å—è–º–∏.\n"
    . "3. –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ª–∏ –≤—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –∏–ª–∏ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –ø–æ –≤–∞–π–±—É.";


    /**
     * @throws TelegramSDKException
     */
    public function __construct(Api $telegram, TelegramMessageRepository $messageRepository)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
        $testBotToken = config('telegram.bots.test.token');
        $this->telegram = new Api($testBotToken);

        $this->messageRepository = $messageRepository;
    }

    /**
     * @throws TelegramSDKException
     */

    public function handleWebhook(Request $request)
    {
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        config(['database.default' => 'mysql_test']);

        $update = $this->telegram->getWebhookUpdate();
        $chatId = $update->getChat()?->id;
        $message = $update->getMessage();
        $callbackQuery = $update->getCallbackQuery();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
        if ($callbackQuery) {
            $this->handleCallbackQuery($callbackQuery);
            return response()->json(['status' => 'ok']);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if ($text = $message->text) {
            $text_split = explode(' ', $text);
            $user = ContestParticipant::firstOrCreate(['telegram_id' => $chatId]);

            switch (true) {
                case $text === "/code":
                    $this->telegram->sendMessage([
                        'chat_id' => $chatId,
                        'text' => "–í–∞—à –∫–æ–¥: `$chatId`"
                    ]);
                    break;

                case str_starts_with($text, '/start'):
                    $this->handleStartCommand($chatId, $user);
                    break;

                case str_starts_with($text, '–Ø'):
                    $this->saveUserName($chatId, $user, $text_split[1]);
                    break;

                default:
                    $this->sendHintMessage($chatId);
                    break;
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        config(['database.default' => 'mysql']);

        return response()->json(['status' => 'ok']);
    }

    private function handleStartCommand($chatId, $user)
    {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
        if ($user->accepted_terms) {
            $this->sendWelcomeBackMessage($chatId);
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π
            $this->sendTermsAcceptanceMessage($chatId);
        }
    }

    private function sendTermsAcceptanceMessage($chatId)
    {
        $welcomeTexts = [
            "‚ú® –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ, –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ 50 000 Ozon-–±–∞–ª–ª–æ–≤.",
            "‚ú® –ß—Ç–æ–±—ã –≤–∞—à –±–∏–ª–µ—Ç —É–¥–∞—á–∏ –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ! –ñ–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª –∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä–µ –∑–∞ 100 000 Ozon-–±–∞–ª–ª–æ–≤ –Ω–∞ –¥–≤–æ–∏—Ö ‚Äî –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–π —Ç—Ä–µ–≤–µ–ª-–ø–æ–ª–æ–≤–∏–Ω–∫–∏."
        ];

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞',
                        'callback_data' => 'accept_terms'
                    ]
                ]
            ]
        ];

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $welcomeTexts[array_rand($welcomeTexts)],
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    private function handleCallbackQuery($callbackQuery)
    {
        $chatId = $callbackQuery->getMessage()->getChat()->id;
        $data = $callbackQuery->getData();

        switch ($data) {
            case 'accept_terms':
                $this->acceptTerms($chatId);
                break;
        }

        // –û—Ç–≤–µ—Ç –Ω–∞ callback query
        $this->telegram->answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);
    }

    private function acceptTerms($chatId)
    {
        $user = ContestParticipant::where('telegram_id', $chatId)->first();

        if ($user) {
            $user->accepted_terms = true;
            $user->accepted_terms_at = now();
            $user->save();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $welcomeMessages = [
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à Ozon Travel Vibe!\n\n–° 1 –ø–æ 30 —Å–µ–Ω—Ç—è–±—Ä—è –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Å—Ä–∞–∑—É –¥–≤–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ 500 000 Ozon-–±–∞–ª–ª–æ–≤. –í –∫–∞–∂–¥–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º 5 –ø–∞—Ä (10 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π), –∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –ø–æ–ª—É—á–∞–µ—Ç –ø–æ 50 000 –±–∞–ª–ª–æ–≤.\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã! üöÄ",
                "‚ú® –ê –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–π–º–∞—Ç—å —É–¥–∞—á—É? Ozon Travel Vibe —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç 1 000 000 Ozon-–±–∞–ª–ª–æ–≤ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü –¥–æ 7 –æ–∫—Ç—è–±—Ä—è!\n\n–ö–∞–∂–¥—ã–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º 5 –ø–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ö–∞–∂–¥–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é ‚Äî –ø–æ 50 000 –±–∞–ª–ª–æ–≤.\n\n–£–¥–≤–æ–π—Ç–µ. –£—Ç—Ä–æ–π—Ç–µ! –£—á–µ—Ç–≤–µ—Ä–∏—Ç–µ! –®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É ‚Äî –∑–æ–≤–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ –Ω–µ –º–µ–Ω—å—à–µ –≤–∞—Å –∑–∞—Å–ª—É–∂–∏–ª –æ—Ç–¥—ã—Ö!"
            ];

            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => $welcomeMessages[array_rand($welcomeMessages)]
            ]);

            // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π
            $this->sendInviteReminder($chatId);
        }
    }

    private function sendInviteReminder($chatId)
    {
        $reminderTexts = [
            "üî• –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â—ë –¥—Ä—É–∑–µ–π –≤ Ozon Travel Vibe! –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥—Ä—É–≥ ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∏—Ç—å 50 000 Ozon-–±–∞–ª–ª–æ–≤. üöÄ",
            "üî• –ë–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º—ã—Ö –≤ Ozon Travel Vibe –∏ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à 100 000 Ozon-–±–∞–ª–ª–æ–≤ –Ω–∞ –¥–≤–æ–∏—Ö. üöÄ"
        ];

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $reminderTexts[array_rand($reminderTexts)]
        ]);
    }

    private function sendWelcomeBackMessage($chatId)
    {
        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. üéâ"
        ]);
    }

    private function sendHintMessage($chatId)
    {
        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        ]);
    }

// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
    public function selectWinners()
    {
        $currentContest = Contest::where('is_active', true)->first();

        if (!$currentContest) {
            return;
        }

        // –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏–Ω—è–≤—à–∏—Ö —É—Å–ª–æ–≤–∏—è
        $winners = ContestParticipant::where('accepted_terms', true)
            ->inRandomOrder()
            ->limit(10)
            ->get();

        foreach ($winners as $winner) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            $prizeCode = strtoupper(substr(md5(uniqid()), 0, 10));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            Winner::create([
                'contest_id' => $currentContest->id,
                'participant_id' => $winner->id,
                'prize_code' => $prizeCode,
                'prize_amount' => 50000
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
            $winnerMessages = [
                "ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞ Ozon Travel Vibe.\n\n–í–∞—à –ø—Ä–∏–∑ ‚Äî 50 000 Ozon-–±–∞–ª–ª–æ–≤. –í–æ—Ç –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: $prizeCode.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! üíô",
                "–£—Ä–∞! –í–∞–º —É–ª—ã–±–Ω—É–ª–∞—Å—å —É–¥–∞—á–∞ –≤ Ozon Travel Vibe. üéâ\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50 000 Ozon-–±–∞–ª–ª–æ–≤! –í–∞—à –ø—Ä–∏–∑–æ–≤–æ–π –∫–æ–¥: $prizeCode.\n\n–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥! üíô"
            ];

            $this->telegram->sendMessage([
                'chat_id' => $winner->telegram_id,
                'text' => $winnerMessages[array_rand($winnerMessages)]
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        $this->sendWinnerAnnouncement($winners);
    }

    private function sendWinnerAnnouncement($winners)
    {
        $winnerList = "";
        foreach ($winners as $winner) {
            $winnerList .= "@{$winner->username}\n";
        }

        $announcementTexts = [
            "–ò—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ Ozon Travel Vibe –ø–æ–¥–≤–µ–¥–µ–Ω—ã! üéâ\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n$winnerList\n–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ —É–¥–∞—á–∞ –ø–æ–∫–∞ –Ω–µ —É–ª—ã–±–Ω—É–ª–∞—Å—å ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë —Ä–æ–∑—ã–≥—Ä—ã—à–∏. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É! üíô",
            "üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∏!\n\n$winnerList\n–ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏–ª –ø–æ 50 000 Ozon-–±–∞–ª–ª–æ–≤. –ê —É–∂–µ —Å–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ‚Äî –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ Ozon Travel Vibe –∏ –ª–æ–≤–∏—Ç–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É —Å–Ω–æ–≤–∞! üíô"
        ];

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        $participants = ContestParticipant::where('accepted_terms', true)->get();

        foreach ($participants as $participant) {
            $this->telegram->sendMessage([
                'chat_id' => $participant->telegram_id,
                'text' => $announcementTexts[array_rand($announcementTexts)]
            ]);
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function processInvitation(TravelUser $user, $commandText)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        $parts = explode(' ', $commandText);
//
        if (count($parts) > 2) {
            $this->telegram->sendMessage(
                ['chat_id' => $user->telegram_id, 'text' => '–ö–∞–∂–µ—Ç—Å—è –≤–∞—à–µ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞']
            );
        }
        if (count($parts) == 2) {
            $inviterId = $parts[1];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            $inviterExists = TravelUser::where('telegram_id', $inviterId)->exists();
            if ($inviterExists && $inviterId != $user->telegram_id) {
                $user->update(['invited_by' => $inviterId]);
            } else {
                $this->telegram->sendMessage(
                    [
                        'chat_id' => $user->telegram_id,
                        'text' => '–°–∞–º–æ–≥–æ —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ–ª—å–∑—è, –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—ÉüòÖ'
                    ]
                );
            }
        } else {
            try {
                $this->telegram->sendMessage(
                    [
                        'chat_id' => $user->telegram_id,
                        'text' => '–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤–∞—à –¥—Ä—É–≥ —É–∂–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, –∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥ –¥—Ä—É–≥–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /start 123 (–∑–∞–º–µ–Ω–∏—Ç–µ 123 –Ω–∞ –µ–≥–æ –∫–æ–¥), –∏ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç –≤–∞—Å –∫ –µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é.'
                    ]
                );
                $this->telegram->sendMessage(
                    [
                        'chat_id' => $user->telegram_id,
                        'text' => '–ï—Å–ª–∏ –∂–µ –≤—ã —Å –¥—Ä—É–∑—å—è–º–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç, —Ç–æ –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º ‚Äî –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!'
                    ]
                );
            } catch (TelegramSDKException $e) {
                return;
            }
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function askForSubscription($chatId)
    {
        $randomMessage = $this->messageRepository->getRandomMessageFromGroup('ask_for_subscription');;

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $randomMessage,
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [['text' => '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'url' => 'https://t.me/+sUletwbFVeA2OWYy']],
                    [['text' => '–Ø –ø–æ–¥–ø–∏—Å–∞–Ω', 'callback_data' => 'check_subscription']]
                ]
            ])
        ]);
    }

    /**
     * @throws TelegramSDKException
     */
    private function askForName($chatId)
    {
        $nameRequestMessage = $this->messageRepository->getRandomMessageFromGroup('name_request_messages');
        $welcomeMessage = $this->messageRepository->getRandomMessageFromGroup('welcome_messages');


        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $this->checkSubscription($chatId) ? $welcomeMessage : $nameRequestMessage
        ]);

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–Ø ***' "
        ]);
    }

    /**
     * @throws TelegramSDKException
     */
    private function saveUserName($chatId, TravelUser $user, $name)
    {
        $user->name = $name;
        $user->save();
        $this->askForSubscription($chatId);
    }

    /**
     * @throws TelegramSDKException
     */
    private function sendFirstQuestion($chatId)
    {
        $question = Question::with('answers')->first();
        $this->sendQuestion($chatId, $question);
    }

    /**
     * @throws TelegramSDKException
     */
    private function sendStartTestButton($chatId)
    {
        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $this->messageRepository->getRandomMessageFromGroup('greetings'),
            'reply_markup' => json_encode([
                'inline_keyboard' => [[['text' => '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', 'callback_data' => 'start_test']]]
            ])
        ]);
    }

    /**
     * @throws TelegramSDKException
     */
    private function sendQuestion($chatId, Question $question)
    {
        $this->sendQuestionGif($chatId, $question);

        $keyboard = $question->answers->map(function ($answer) use ($question) {
            return [['text' => $answer->text, 'callback_data' => "answer_{$question->id}_{$answer->id}"]];
        })->toArray();

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "‚ùì –í–æ–ø—Ä–æ—Å " . $question->id . ": " . $question->text,
            'reply_markup' => json_encode([
                'keyboard' => $keyboard,
                'resize_keyboard' => true,
                'one_time_keyboard' => true
            ])
        ]);
    }

    /**
     * @throws TelegramSDKException
     * @throws Exception
     */
    private function sendQuestionGif($chatId, Question $question, string $text = '')
    {
        if (!$question->telegram_file_id) {
            throw new Exception("Telegram file_id not found for question {$question->id}");
        }

        try {
            $this->telegram->sendAnimation([
                'chat_id' => $chatId,
                'animation' => "{$question->telegram_file_id}",
                'caption' => ""
            ]);
        } catch (Exception $e) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É('
            ]);
        }
    }

    private function getCurrentQuestion(TravelUser $user): ?Question
    {
        $answers = $user->test_answers ? json_decode($user->test_answers, true) : [];

        if (empty($answers)) {
            return Question::first();
        }

        $lastQuestionId = max(array_keys($answers));
        return Question::where('id', '>', $lastQuestionId)->first();
    }

    /**
     * @throws TelegramSDKException
     */
    private function handleTextAnswer($chatId, TravelUser $user, Question $question, Answer $answer)
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        $answers = $user->test_answers ? json_decode($user->test_answers, true) : [];
        $answers[$question->id] = $answer->id;
        $user->update(['test_answers' => json_encode($answers)]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        if ($answer->reaction) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => $answer->reaction
            ]);
        }

        // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        $nextQuestion = Question::where('id', '>', $question->id)->first();
        if ($nextQuestion) {
            $this->sendQuestion($chatId, $nextQuestion);
        } else {
            $this->completeTest($chatId, $user);
        }
    }

    /**
     * @throws TelegramSDKException
     */

    private function removeInlineButtons($chatId, $messageId)
    {
        try {
            $this->telegram->editMessageReplyMarkup([
                'chat_id' => $chatId,
                'message_id' => $messageId,
                'reply_markup' => json_encode(['inline_keyboard' => []])
            ]);
        } catch (Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: " . $e->getMessage());
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function handleSubscriptionCheck($chatId, TravelUser $user)
    {
        //$isSubscribed = $this->checkSubscription($chatId);
        //–í —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ —é–∑–µ—Ä –≤—Å–µ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∞–Ω
        $isSubscribed = true;

        if ($isSubscribed) {
            $user->update(['is_subscribed' => true]);

            if (!$user->name) {
                $this->askForName($chatId);
            } else {
                $this->sendStartTestButton($chatId);
            }
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!' —Å–Ω–æ–≤–∞."
            ]);
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function handleAnswer($chatId, $callbackData, TravelUser $user)
    {
        [$_, $questionId, $answerId] = explode('_', $callbackData);
        $answer = Answer::find($answerId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        $answers = $user->test_answers ? json_decode($user->test_answers, true) : [];
        $answers[$questionId] = $answerId;
        $user->update(['test_answers' => json_encode($answers)]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        if ($answer->reaction) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => $answer->reaction
            ]);
        }

        // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        $nextQuestion = Question::where('id', '>', $questionId)->first();
        if ($nextQuestion) {
            $this->sendQuestion($chatId, $nextQuestion);
        } else {
            $this->completeTest($chatId, $user);
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function completeTest($chatId, TravelUser $user, $messageId = null)
    {
        if ($messageId) {
            $this->removeInlineButtons($chatId, $messageId);
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        $refLink = "https://t.me/ozon_travel_vibe_bot?start=" . $user->telegram_id;
        $randomMsg = $this->messageRepository->getRandomMessageFromGroup('complete_test_message');;

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $randomMsg,
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [['text' => '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', 'callback_data' => 'restart_test']],
                    [
                        [
                            'text' => '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
                            'url' => "https://t.me/share/url?text=" . rawurlencode(
                                    "–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ–º –ª–∏ –º—ã –ø–æ –æ—Ç–ø—É—Å–∫–Ω–æ–º—É –≤–∞–π–±—É! üå¥ "
                                ) . "&url=" . urlencode($refLink)
                        ]
                    ]
                ]
            ])
        ]);


        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        $this->checkInvitationRelationships($user);
    }

    /**
     * @throws TelegramSDKException
     */
    private function checkInvitationRelationships(TravelUser $user)
    {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∫–µ–º-—Ç–æ
        if ($user->invited_by) {
            $this->checkAndSendCompatibility($user);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        $invitedUsers = TravelUser::where('invited_by', $user->telegram_id)->get();

        foreach ($invitedUsers as $invitedUser) {
            if ($invitedUser->hasCompletedTest()) {
                $this->checkAndSendCompatibility($invitedUser);
            }
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function checkAndSendCompatibility(TravelUser $invitedUser)
    {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
        $inviter = TravelUser::where('telegram_id', $invitedUser->invited_by)->first();

        if (!$inviter) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç
        if ($invitedUser->hasCompletedTest() && $inviter->hasCompletedTest()) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            $compatibility = $this->calculateCompatibility($inviter, $invitedUser);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            try {
                $this->sendCompatibilityResult($inviter->telegram_id, $invitedUser, $compatibility);
                $this->sendCompatibilityResult($invitedUser->telegram_id, $inviter, $compatibility);
            } catch (Exception $e) {
                Log::error($e->getMessage());
            }
        }
    }

    private function calculateCompatibility(TravelUser $user1, TravelUser $user2)
    {
        $answers1 = json_decode($user1->test_answers, true);
        $answers2 = json_decode($user2->test_answers, true);

        $totalQuestions = count($answers1);
        $matchingAnswers = 0;

        foreach ($answers1 as $questionId => $answerId) {
            if (isset($answers2[$questionId]) && $answers2[$questionId] == $answerId) {
                $matchingAnswers++;
            }
        }

        $percentage = round(($matchingAnswers / $totalQuestions) * 100);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if ($percentage >= 80) {
            return '–í—ã –∏–¥–µ–∞–ª—å–Ω–∞—è travel-–ø–∞—Ä–∞! üåü';
        } elseif ($percentage >= 60) {
            return '–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –û—Ç–¥—ã—Ö –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º üëç';
        } elseif ($percentage >= 40) {
            return '–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –ù—É–∂–Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è! ü§ù';
        } else {
            return '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è. –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ? üòÖ';
        }
    }

    /**
     * @throws TelegramSDKException
     */
    private function sendCompatibilityResult($chatId, TravelUser $partner, $compatibilityText)
    {
        try {
            $partnerName = $partner->name ?: '–í–∞—à –¥—Ä—É–≥';

            $message = "üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å $partnerName!\n\n";
            $message .= "{$compatibilityText}\n\n";
            $message .= "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!";

            $refLink = "https://t.me/ozon_travel_vibe_bot?start=" . $chatId;

            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => $message,
                'reply_markup' => json_encode([
                    'inline_keyboard' => [
                        [
                            [
                                'text' => '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ –¥—Ä—É–∑–µ–π',
                                'url' => "https://t.me/share/url?text=" . rawurlencode(
                                        "–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ–º –ª–∏ –º—ã –ø–æ –æ—Ç–ø—É—Å–∫–Ω–æ–º—É –≤–∞–π–±—É! üå¥ "
                                    ) . "&url=" . urlencode($refLink)
                            ]
                        ],
                        [['text' => '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', 'callback_data' => 'restart_test']]
                    ]
                ])
            ]);
        } catch (\Telegram\Bot\Exceptions\TelegramResponseException $e) {
            if (str_contains($e->getMessage(), 'chat not found')) {
                Log::warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $chatId –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                );
            } else {
                Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: " . $e->getMessage());
            }
        }
    }
}
